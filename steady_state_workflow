
# Complete Steady State Workflow
# Andrew Crowley
# June, 2017

# PACKAGES

library(tidyverse)
library(stringr)
library(readxl)
library(zoo)

# PREP

# by habit, Scrubber results take the form of an Excel workbook,
#   one receptor per sheet

sheets <- excel_sheets("steady_state_results.xlsx") # USER INPUT HERE

for(i in 1:length(sheets)) {
  assign(as.character(sheets[i]), read_excel("steady_state_results.xlsx", i)) # USER INPUT HERE
}

# bypass process to insert analyte column for the moment, manually write in
R2A_R131$analyte <- "R2A_R131"
R2A_H131$analyte <- "R2A_H131"
R2B$analyte <- "R2B"
R3A_F158$analyte <- "R3A_F158"
R3A_V158$analyte <- "R3A_V158"
R3B_NA1$analyte <- "R3B_NA1"
R3B_SH$analyte <- "R3B_SH"

full <- do.call(rbind, mget(sheets))
full <- rename(full, spot_name = Name, Rmax_global = Rmax, KD_global = KD, Rmax_local = Rmax__1, KD_local = KD__1)
full <- select(full, spot_name, analyte, Rmax_global, KD_global, Rmax_local, KD_local)

full$Rmax_global <- na.locf(full$Rmax_global)

# historically, the protein concentrations used to print spots generate
#   very similar results; by extracting the spot concentration, results
#   can be grouped by higher-order feature
#   (eg. subclass or Fc point mutation for antibodies)

name_split <- strsplit(full$spot_name, "_")

full$conc <- NA
full$group_1 <- NA
full$group_2 <- NA
full$group_3 <- NA

for (i in 1:length(name_split)) {
  full$conc[i] <- name_split[[i]][length(name_split[[i]])]
}

full$conc[str_detect(full$spot_name, "blank") == T] <- 0
full$conc[str_detect(full$spot_name, "bsa") == T] <- 0

for (i in 1:length(name_split)) {
  full$group_1[i] <- name_split[[i]][1]
}

for (i in 1:length(name_split)) {
  full$group_1[i] <- name_split[[i]][1]
}

for (i in 1:length(name_split)) {
  full$group_2[i] <- name_split[[i]][2]
}

for (i in 1:length(name_split)) {
  full$group_3[i] <- name_split[[i]][3]
}

# ends up duplicating the concentrations into the group variables,
#   so these are removed

full$group_2[full$group_2 == full$conc] <- NA
full$group_3[full$group_3 == full$conc] <- NA

full$conc[str_detect(full$spot_name, "blank") == T] <- 0
full$conc[str_detect(full$spot_name, "bsa") == T] <- 0
# the section above seems to work, but can probably be done more
#   efficiently down the line

# local results are already exported as properly scaled, numeric-only values,
#   but global results need to be scaled to molar baseline

full$KD_global_value <- substr(full$KD_global, 1, nchar(full$KD_global) - 2)
full$KD_global_value <- as.numeric(full$KD_global_value)

full$KD_global_unit <- substr(full$KD_global, nchar(full$KD_global) - 1, nchar(full$KD_global))
full$KD_global_unit <- tolower(full$KD_global_unit)
# if blanks / (-) ctrls have rare molar scale values, will this break?

# units <- c("mm", "um", "nm", "pm")
# scaling <- c(1e-03, 1e-06, 1e-09, 1e-012)
# scale_to_molar <- data.frame(units, scaling)

full$scale_factor <- 1

full$scale_factor[full$KD_global_unit == "mm"] <- 1e-03
full$scale_factor[full$KD_global_unit == "um"] <- 1e-06
full$scale_factor[full$KD_global_unit == "nm"] <- 1e-09
full$scale_factor[full$KD_global_unit == "pm"] <- 1e-012

full$KD_global <- full$scale_factor * full$KD_global_value

full <- select(full, group_1, group_2, group_3, conc, analyte, Rmax_global, KD_global, Rmax_local, KD_local)

global_SS <- select(full, analyte, group_1, group_2, group_3, conc, Rmax_global, KD_global)
global_SS <- rename(global_SS, Rmax = Rmax_global, KD = KD_global)

local_SS <- select(full, analyte, group_1, group_2, group_3, conc, Rmax_local, KD_local)
local_SS <- rename(local_SS, Rmax = Rmax_local, KD = KD_local)

# FILTER

# per the recommendation of the US distributor for the SPR, the hallmarks of
#   genuine receptor-ligand interactions are:
#     Rmax value > 50 response units (RU)
#     residual stdev < 10-15

# steady state does not produce residual stdev, so only Rmax is used

global_SS$valid <- 0
global_SS$valid[global_SS$Rmax >= 30] <- 1
global_SS$valid[is.na(global_SS$KD)] <- 0
global_SS <- select(global_SS, -Rmax)

global_SS <- arrange(global_SS, analyte, group_1, group_2, group_3, conc)
write.csv(global_SS, file = "global_SS_processed.csv", row.names = F)

local_SS$valid <- 0
local_SS$valid[local_SS$Rmax >= 30] <- 1
local_SS$valid[is.na(local_SS$KD)] <- 0
local_SS <- select(local_SS, -Rmax)

local_SS <- arrange(local_SS, analyte, group_1, group_2, group_3, conc)
write.csv(local_SS, file = "local_SS_processed.csv", row.names = F)

# VISUALIZATION
